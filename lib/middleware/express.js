import bodyParser from 'body-parser'
import {
  removeHttpVerbFromRules,
  readFile
} from './utils'
import { validateRequest } from './validationUtils'

export default function (app) {
  app.set('port', process.env.PORT || 3000)
  app.use(bodyParser.json())
  app.use(bodyParser.urlencoded({ extended: true }))
}

const RULES_FILE_NAME = 'rules.json'

/**
 * TBD: middleware that checks the request body and querystring against the
 * existing json configuration in order to ensure that:
 * all required parameters are present
 * all parameters are of the correct type
 * non-existing parameters are blocked
 *
 * @throws throw a 400 code error with a relevant error message
 *
 * @param {object} req request object generated by express
 * @param {object} res response object generated by express
 * @param {function} next middleware function
 */
export const checkAgainstRules = async (req, res, next) => {
  try {
    const rules = await readFile(RULES_FILE_NAME)

    const { parameters: relevantRules = [] } = removeHttpVerbFromRules(
      rules[`${req.baseUrl}${req.path}`],
      req.method
    )

    const validationErrors = validateRequest(req, relevantRules)

    if (validationErrors.length) {
      return res.status(400).send({
        errors: validationErrors
      })
    }

    return next()
  } catch (e) {
    return res.status(500).send('There was a problem validating the request')
  }
}
